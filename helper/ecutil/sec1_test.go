package ecutil

import (
	"bytes"
	"encoding/hex"
	"testing"
)

var ecKeyTests = []struct {
	derHex            string
	shouldReserialize bool
}{
	// Generated using:
	//   openssl ecparam -genkey -name secp384r1 -outform PEM
	{"3081a40201010430bdb9839c08ee793d1157886a7a758a3c8b2a17a4df48f17ace57c72c56b4723cf21dcda21d4e1ad57ff034f19fcfd98ea00706052b81040022a16403620004feea808b5ee2429cfcce13c32160e1c960990bd050bb0fdf7222f3decd0a55008e32a6aa3c9062051c4cba92a7a3b178b24567412d43cdd2f882fa5addddd726fe3e208d2c26d733a773a597abb749714df7256ead5105fa6e7b3650de236b50", true},
	// Generated using(OpenSSL 1.1.0g  2 Nov 2017):
	//   openssl ecparam -genkey -name brainpoolP256r1 -noout -outform DER|xxd -p|tr -d '\n'
	{"30780201010420028c2ff62cd4d0dc885a15d89b40512bfa4b1d0ca44f8ae42f9fe63b439aa562a00b06092b2403030208010107a144034200046694a2c7b5743a6e38411323075faaf6540a5eeccabb934c0842e7555ad824b2068f3d6213d2b34590130b42f7ecd5a311f4dbc3f8e186511c13ffb0196fc4cd", true},
	// Generated using(LibreSSL 2.6.4):
	//   libressl ecparam -genkey -name FRP256v1 -noout -outform DER|xxd -p|tr -d '\n'
	{"3079020101042071463bc1fb6fbe96296f4407343281e8787f75a0188b620a52f6d09cbfb0c8b1a00c060a2a817a01815f65820001a14403420004eeaaa31a938d87a23a4bc58d129fb535029f6f1719abdf796cc8d4f3fac8cd2c0f434f0539ed3a85fc7ad8d6b94223af6172e2b9afb26e96638bbb9724f8aa0f", true},
	// This key was generated by GnuTLS and has illegal zero-padding of the
	// private key. See https://github.com/golang/go/issues/13699.
	{"3078020101042100f9f43a04b9bdc3ab01f53be6df80e7a7bc3eaf7b87fc24e630a4a0aa97633645a00a06082a8648ce3d030107a1440342000441a51bc318461b4c39a45048a16d4fc2a935b1ea7fe86e8c1fa219d6f2438f7c7fd62957d3442efb94b6a23eb0ea66dda663dc42f379cda6630b21b7888a5d3d", false},
	// This was generated using an old version of OpenSSL and is missing a
	// leading zero byte in the private key that should be present.
	{"3081db0201010441607b4f985774ac21e633999794542e09312073480baa69550914d6d43d8414441e61b36650567901da714f94dffb3ce0e2575c31928a0997d51df5c440e983ca17a00706052b81040023a181890381860004001661557afedd7ac8d6b70e038e576558c626eb62edda36d29c3a1310277c11f67a8c6f949e5430a37dcfb95d902c1b5b5379c389873b9dd17be3bdb088a4774a7401072f830fb9a08d93bfa50a03dd3292ea07928724ddb915d831917a338f6b0aecfbc3cf5352c4a1295d356890c41c34116d29eeb93779aab9d9d78e2613437740f6", false},
}

func TestParseECPrivateKey(t *testing.T) {
	for i, test := range ecKeyTests {
		derBytes, _ := hex.DecodeString(test.derHex)
		key, err := ParseECPrivateKey(derBytes)
		if err != nil {
			t.Fatalf("#%d: failed to decode EC private key: %s", i, err)
		}
		serialized, err := MarshalECPrivateKey(key)
		if err != nil {
			t.Fatalf("#%d: failed to encode EC private key: %s", i, err)
		}
		matches := bytes.Equal(serialized, derBytes)
		if matches != test.shouldReserialize {
			t.Fatalf("#%d: when serializing key: matches=%t, should match=%t: original %x, reserialized %x", i, matches, test.shouldReserialize, serialized, derBytes)
		}
	}
}
